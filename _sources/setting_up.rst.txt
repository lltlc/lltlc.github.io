第一章：准备工作
==========================

1. 选择你的计算机
-------------------

以当前的情况，我个人的选择是 Mac —— 而这本书里提到的所有设置、开发环境都是基于 Mac OSX 的。

.. sidebar::  你的原则应该是：

	坚决不要参与那种旷日持久从无定论的争论。自己思考可以，自己得出结论可以，但绝对没必要参加争论。

人是很有趣的东西，大多数人会控制不住自己，反复参与那些其实最终无论如何也不见得有结论的争论…… 他们乐此不彼地浪费自己的生命 —— 你不要这样。这个简单的原则未来会让你节省很多的时间：无论是 “哪个编辑器更好？”，还是 “哪个编程语言更有效率？”，抑或 “哪个算法更高明？”，甚至，“该用 Tab，还是空格？如果用空格的话，应该用两个空格，还是是个空格？” 

有些人会在这种争论中获得莫名其妙的快感，但，我会建议你，想办法找到或者培养其它方式获得的快感 —— 比如，把事儿做完、做好，而后交付使用的快感；或者是，写出东西之后真的有很多人用起来所给你带来的快感。是的，绝大多数人一生被“天然的快感”所左右，而另外一些人，有意识地选择、培养自己的快感来源，甚至可以训练自己的快感程度。
所以，你有什么就用什么罢。要选就自己选，反正选择之后是自己用，自己承担后果。只不过，出于写作时间成本考虑，我只用 OSX 操作系统上的示范，至于 Windows/Linux 的对应版本和步骤之类的东西，1) 有可能将来会有热心读者配合补充；2) 或者你自己运用在这本书里学到的各种学习习惯去独立解决。


2. 大屏幕很重要，加另外一个屏幕更重要
---------------------------------------------

衣服简谱一点没关系，食物清淡一点没关系，工具不够精良绝对不行。 **千万不要在工具上舍不得花钱，否则你注定落魄一生。**

大尺寸屏幕 ——　甚至两块屏幕 —— 真的非常重要，这不仅仅是对程序员重要，其实对每个人都是一样的。美国犹他大学的研究者在 2008 年经过统计调查发现，大屏幕一天能帮人节省两个半小时 —— 请注意，这是干活做事过程中的两个半小时！别说程序员了，哪怕是那些每天书写文档，编辑表格的人，使用 24 吋屏幕的人要比使用 17 吋屏幕的人快 52%！这几乎是十年前，现在已经是 2016 年，iMac 的显示器已经是 27 吋了，分辨率已经是 4096 x 2304，几乎相当于十年前四块显示器的显示区域……

编程，其实是写作的一种，只不过，平时你用自然语言写作，编程是用格式化语言写作。在任何写作过程中，随手查资料都是必不可少的 —— 在单独的一块显示器上摆放查 Google、Wikipedia 的浏览器，以及其它需要常备显示的程序很重要，这样做会让你大幅度降低大脑承受多任务操作的压力。

3. 注册一个 Github 帐号
----------------------------------------

.. sidebar:: 习得任何技能的第一步骤：

    马上开始像那些已经精通这个技能的人一样生活。

必须的。一切的学习与创造，都是学习者与创造者的生活方式、生活内容。去目标技能拥有者最活跃的地方生活，像他们一样生活，直至真的就那么生活 —— 这就是学习与创造的另外一个更为生动、更为本质的描述。所谓近朱者赤近墨者黑，讲的也是一样的道理 —— 因为激活大脑里的“镜像神经元”是学习与创造的最初起点。

Github 其实是目前地球上最先进、最高级、最高质量的社交网站，对，它就是个社交网站 —— 虽然貌似现在的人们普遍认为“社交网站”指的是另外一类东西。在那里，工程师们用他们固有的最高效的方式相互交流。他们写好代码就传到 Github 上去，用 Github 做开发中必须的重要事情：

	* 备份自己的代码
	* 文档与代码的版本管理
	* 相互最高效地交流与协作
	* 通过展现有效活动而获得更高信用
	* 更方便地展示自己与自己的成果

在 Github 出现之前，工程师们在命令行下最常使用的命令式 cd 和 ls，现在，他们最常用的命令早已经是 git 了…… Github 是个崭新的世界，先开门进去罢 —— 注册个帐号就行了，多简单！一个零人沮丧的事实是，在中国有很多所谓的程序员，真的不用 Github，还有很多为了求职跑到 Github上提交假项目…… 三叹。

4. 小心你的中文输入法
----------------------------------------

.. sidebar:: 有事请 Google！

    能用 Google 找到答案的问题，不要去问别人 —— 这是一个人的基本素养……

在与计算机打交道的时候，中日韩国家的人因为输入的并非英文半角字符而造成的错误非常普遍，因为他们的输入法使用的是 CJKV “全角字符”，而非计算机编程语言可识别的“半角字符”（至于这两个词究竟是什么意思，来龙去脉是什么，自己 Google 一下就好）…… 因此新手有必要在使用编辑器书写代码的时候事先关闭非英文输入法。以后熟悉了之后，当然不再会因此浪费太多时间。

也需要因此做一些特定的配置。比如，应该在 `System Preference > Language & Region > Preferred Languages` 里将系统的首选语言设置成英文，这会在将来节省很多时间，

如果你使用中文输入法的话，那么，`Spotlight` 的快捷键与更换输入法的快捷键最好都重新设置一下，总之就是不要占用 `Control` 键 ``⌃``。请在 `System Preferences > Keyboard > Shortcuts` 里设置。

我的习惯是把 `Spotlight` 设置为 ``⌥ Space``，把更换输入法设置为 ``⌘ Space``；而 `Spotlight` 中，`Show Finder Search Window` 不使用快捷键；`Input Sources` 中，`Select next source in Input menu` 不使用快捷键。

5. 命令行工具（Terminal）的配置与使用
----------------------------------------

用 Spotlight 呼出命令行工具：Terminal。无论是谁，都得从熟悉它的使用开始。

打开 Terminal 之后，可以试试以下两个命令:

.. code:: bash

	cd ~
	ls

现在需要知道的就是，每一行命令都必须做到每个字符都不能错，输入正确之后，按回车键 ``⏎`` 执行命令。

接下来要做的事情，按步骤完成，但你肯定完全不知道自己在做什么，照着做就行了（为了保证不出错，请逐次拷贝粘贴以下命令行，而后再按回车键执行）：

.. code:: bash

	cd~
	curl -O https://raw.githubusercontent.com/donnemartin/dev-setup/master/.bash_profile
	curl -O https://raw.githubusercontent.com/donnemartin/dev-setup/master/.bash_prompt
	curl -O https://raw.githubusercontent.com/donnemartin/dev-setup/master/.aliases

全部完成之后，重启 Terminal（就是关掉退出之后，再重新打开）。刚才的命令完成了很多事情，只不过现在你搞不懂，你能看到的就是命令行提示变得花花绿绿了，各种颜色有不同的意义 —— 但以后再说。

接下来，要为 Terminal 换个皮肤 —— 天天要用的东西，不好看太难受了。我个人喜欢这两个：

	* Solarized
	* Spacegray

去 Google 一下，找到你选的那个，使用说明都非常清楚的 —— 花点时间阅读就可以了。

.. sidebar:: 知易行难

    “花点时间阅读就可以了……” 说得轻巧 —— 以后你就知道了，真的有很多人连这个都做不到！

要为所有与写代码相关的程序设置特定的字体，以便很容易识别出那些不小心输入的“全角字符”。我个人选择的是 `Courier New` 这个字体，因为这个字体的亚洲文字也挺好看，对我来说也更容易识别 —— 反正你要选择一个“等宽字体”。欧美的程序员偏爱 `Menlo` 之类的 —— 也许更多是因为他们没有亚洲输入法使用者的苦恼罢。

在 iMac 大屏幕上，我会把 Terminal 的字体设置为 `20px` …… 可问题是，你打开 `Terminal 的 Preferences > Profiles > Solarized Dark > Text > Font`，点 `Change` 按钮，跳出来的对话框里，你会发现你无法将字体设置为 `20`，下拉框里，`18` 之后就是 `24` 了…… 苹果的这个设计糊弄了很多人 —— 你这样：拖住对话框右下角横着拉，将对话框拉长到一定程度，你就发现那个字体选择框变成了“输入框”与“下拉选择框”的组合…… 你就可以在里面输入 `20` 了。

还有，Mac OSX 其实还有很多快捷键可以设置，其中一个比较重要的是 `New Terminal at Folder`，在 `System Preferences > Keyboard > Shortcuts > Services > Files and Folders` 里可以找到。我把它设置成了 ``⌃⌥⌘T``，以后在 Finder 里，用鼠标选中某个文件夹（或称“目录”），然后按 ``⌃⌥⌘T``，就可以呼出 Terminal 并且将工作目录转至这个文件夹内…… 很方便。

好了，Terminal 的基本设置算是完成了。

另外，有三个 Mac OSX 系统自带的东西，工程师们会觉得不够用，进而造出更好的东西来替代，它们分别是：

	+-----------+-------------------------+
	| 原生应用  | 替代应用                |
	+===========+=========================+
	| Terminal  | iTerm                   |
	+-----------+-------------------------+
	| Finder    | TotalFinder/Path Finder |
	+-----------+-------------------------+
	| Spotlight | QuickSilver/Alfred      |
	+-----------+-------------------------+

我个人的选择是：

	Terminal & TotalFinder & Alfred

建议你立刻硬选一组，别在这里浪费时间，往前走，要做的事情还很多很多。

使用命令行工具，可以对系统下的文件（file）和目录（folder/dirctory/dir，这三个词在大多数情况下是一回事儿）进行罗列、创建、复制、移动、删除、修改等操作。以下是一些最常用的命令：

	+-----------+--------------------------------------------------------+
	| 命 令     | 说 明                                                  |
	+===========+========================================================+
	| **ls**    | 罗列当前目录下的内容                                   |
	+-----------+--------------------------------------------------------+
	| **cd**    | 更换工作目录                                           |
	+-----------+--------------------------------------------------------+
	| **pwd**   | 现实当前完整工作目录                                   |
	+-----------+--------------------------------------------------------+
	| **touch** | 创建一个文件                                           |
	+-----------+--------------------------------------------------------+
	| **mv**    | 移动/更名文件或目录                                    |
	+-----------+--------------------------------------------------------+
	| **rm**    | 删除文件活目录                                         |
	+-----------+--------------------------------------------------------+
	| **nano**  | 使用 nano 编辑纯文本文件                               |
	+-----------+--------------------------------------------------------+
	| **open**  | 打开一个文件，就好像你在 Finder 里双击那个文件图标一样 |
	+-----------+--------------------------------------------------------+
	| **clear** | 清空屏幕                                               |
	+-----------+--------------------------------------------------------+
	| **sudo**  | 用管理员身份去执行一个命令                             |
	+-----------+--------------------------------------------------------+


这些命令现在倒没必要马上深入研究，因为你早晚会不得不深入研究他们的。现在更必要的是学习 Terminal/iTerm2 的使用，有哪些快捷键等等…… 倒有个好去处，在 Github 上：

	`https://github.com/0nn0/terminal-mac-cheatsheet <https://github.com/0nn0/terminal-mac-cheatsheet>`_ 

这个 Cheatsheet 值得打印出来，反复看，用的时候随时参考，直到所有视觉记忆全部变成肌肉记忆为止……

.. sidebar:: 无论学什么都可以先……

	**Cheatsheet** 这个词应该记住，以后不管学什么，都到网上 Google 一下 xxx cheatsheet，多翻几个，一定有收获。

…… 或者说是，“直到把一般记忆变成脊椎记忆为止”，或者说是，“直到大脑皮层表面形成了专门的沟回为止”…… 反正都是一个意思：就是熟练到可以用潜意识即可完美完成的地步。

注意：“通读”是做工程师必须的能力。你不一定要全部能够理解（对任何人来说，最初都不可能做到），但你必须对整个文档有一个整体的认识。这就好像读书的时候，你能做到虽然不能完全读懂，但确实能够完整读完 —— 之后再多读几遍么！古人说的是对的：读书千遍其义自见。还有就是，若是从一开始就没有“通读”的意识，后面不知道会吃多大的亏，而且吃了多少亏自己都完全不知道…… 这很可怕。

举个简单的例子罢：

很多工程师，用了好多年 Terminal，竟然都不知道竟然还有个快捷键能把光标前的两个词调换一下位置：按一下 `esc` 键，然后再按一下 `t` （通常标记为：``⎋-t``）…… 你想想看他们在过去的那么多年里，浪费了多少次键盘敲击？—— 虽然说起来、听起来没什么，可若是真的严肃起来去想，有什么比时间更重要的呢？浪费了大量的时间、浪费宝贵的生命，只不过是因为最初的时候没有养成“只要是重要的文档，必须通读至少一遍的习惯”而已。

所以说，“优秀是一种习惯”真的并不是空话，是放之四海皆准的道理。随后的过程中，我们会建立很多很多的好习惯，甚至这句话本身也会在各个地方重复 —— 生活质量就是这样一点一点提高的，放在哪个领域里其实都一样。

6. 安装 XCode Command Line Tool
----------------------------------------

过去安装这个东西费劲死了，在需要翻山越岭的情况下下载两个多 G 的东西…… Mac OSX EI Capitan 之后，终于可以在命令行工具（Terminal）下这样安装了：

.. code-block:: bash

	xcode-select --install

7. 安装 Homebrew
----------------------------------------

还是在命令行工具中拷贝粘贴以下代码，而后按回车键 ``⏎``……

.. code-block:: bash

	ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

随后再次在命令行工具中拷贝粘贴以下代码，而后按回车键 ``⏎``……

.. code-block:: bash

	echo 'export PATH="/usr/local/bin:$PATH"' >> ~/.bash_profile

8. 安装 Git
----------------------------------------

.. code-block:: bash

	brew install git


9. 安装 Python3 的 Anaconda 发行版
----------------------------------------

Anaconda 是 Python 的一个发行版，其中集成了绝大多数你将来所需要配置使用程序包，用它安装 Python3 是最方便的。去 `Anaconda 的官方网站 <https://www.anaconda.com/download/#macos>`_ 下载而后安装就是了。安装完毕之后，可以在 Terminal 里执行以下命令试试看：

.. command-output:: python -V

在命令行中输入 ``python ⏎`` 即可进入 Python 的命令行解析工具，随时可以按 ``⌃ c`` 退出（也可以通过执行 `exit()` 命令退出）。

.. code-block:: python

	Python 3.6.3 ... 
	[GCC 4.2.1 Compatible Clang 4.0.1 (tags/RELEASE_401/final)] on darwin
	Type "help", "copyright", "credits" or "license" for more information.

	>>> import this




现在，输入以下一行代码而后回车 ``⏎`` 试试？

.. code:: python

	import this

你会看到一首诗：

.. program-output:: python code/import_this.py

.. sidebar::  贪玩是优点！

    好玩、有趣、孜孜不倦地寻找快乐，这是一种难得的本事呢……

这是个 Python 的彩蛋（East Egg），它(`import this`)也没有什么其他的用处。不过，这首诗是有意义的，因为它巧妙地把一些写代码时所需的重要指导思想编排在一起……

以上，说明你的 Python 已经安装好并测试成功。

10. 安装 PyCharm
----------------------------------------

可以用来编辑 Python 程序的编辑器很多，不过，为了效率和方便，推荐使用 PyCharm —— 这是 `JetBrains` 出品的综合开发环境（IDE），有很多必要且方便的功能。 `它有收费版（Professional），也有免费版（Community Edition） <https://www.jetbrains.com/pycharm/download/#section=mac>`_  ，刚上手的时候，免费版已经足够用了，不过，将来有一天，肯在工具上不凑合你的，早晚还是会买收费版本的，我觉得值。

用快捷键 ``⌘,`` 打开设置面板，到 `Editor > Color Scheme` 选一个自己喜欢的样式 —— 我选的是 `Monokai`；到 `Editor > Font` 里选一下字体，`Font` 我选的是 `Courier New`，`Size` 我选的是 `20`...

至于这个 IDE 的各种用法，以后慢慢学，不着急。有时间的话，就自己看看帮助文件……

----------------------------------------

行了，到此为止，准备工作基本完成了。下一步就是开始学习如何写代码了……
